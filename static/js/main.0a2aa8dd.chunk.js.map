{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","preventDefault","handleInputChange","console","log","target","name","value","setState","defineProperty","state","fetch","then","res","json","isLoaded","items","value2","_this2","_this$state","values","react_default","a","createElement","classname","className","onSubmit","type","onChange","map","item","key","phonetic","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOA+FeA,qBArFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAwBRQ,aAAe,SAACC,GACdA,EAAMC,kBA1BWT,EAgCnBU,kBAAoB,SAACF,GACnBA,EAAMC,iBACNE,QAAQC,IAAIJ,GACZG,QAAQC,IAAIJ,EAAMK,OAAOC,MACzBH,QAAQC,IAAIJ,EAAMK,OAAOE,OACzBf,EAAKgB,SAALf,OAAAgB,EAAA,EAAAhB,CAAA,GACGO,EAAMK,OAAOC,KAAON,EAAMK,OAAOE,QANR,IAQvBD,EAAQd,EAAKkB,MAAbJ,KAELK,MADY,2DAA2D,CAACL,GAAM,YAEzEM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJtB,EAAKgB,SAAS,CACZO,UAAU,EACVC,MAAOF,OA7CftB,EAAKkB,MAAQ,CACXM,MAAO,GACPD,UAAU,EACVT,KAAM,UACNW,OAAQ,SANOzB,mFAYC,IAAA0B,EAAAvB,KACbW,EAAQX,KAAKe,MAAbJ,KAELK,MADY,2DAA2D,CAACL,GAAM,YAEzEM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJI,EAAKV,SAAS,CACZO,UAAU,EACVC,MAAOF,uCAkCR,IACAR,EAAQX,KAAKe,MAAbJ,KADAa,EAEmBxB,KAAKe,MAAzBK,EAFCI,EAEDJ,SAAUC,EAFTG,EAESH,MACLvB,OAAO2B,OAAOJ,GAEzB,OAAKD,EAIDM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAAd,uBACAJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,aAAaC,SAAU/B,KAAKI,cAC1CsB,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOrB,KAAK,OAAOsB,SAAUjC,KAAKO,qBAEhDmB,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASpB,MAAM,YAG7Bc,EAAAC,EAAAC,cAAA,UACGP,EAAMa,IAAI,SAAAC,GAAI,OACXT,EAAAC,EAAAC,cAAA,MAAIQ,IAAI,aAAR,aACaD,EAAKE,aAIxBX,EAAAC,EAAAC,cAAA,qBAAajB,IApBVe,EAAAC,EAAAC,cAAA,gCA7DKU,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.0a2aa8dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\n/**\n * @author: Joel Sahli\n * @version: 3.0\n */\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n      name: \"example\",\n      value2: \"other\",\n\n    }\n  }\n\n  //fetch Methode\n  componentDidMount() {\n    let {name} = this.state;\n    const url = 'https://googledictionaryapi.eu-gb.mybluemix.net/?define='+[name]+'&lang=en';\n    fetch(url)\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            isLoaded: true,\n            items: json\n          })\n        });\n\n  }\n  handleSubmit = (event)=>{\n    event.preventDefault()\n\n\n  }\n\n  //Input Field\n  handleInputChange = (event) =>{\n    event.preventDefault()\n    console.log(event)\n    console.log(event.target.name)\n    console.log(event.target.value)\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n    let {name} = this.state;\n    const url = 'https://googledictionaryapi.eu-gb.mybluemix.net/?define='+[name]+'&lang=en';\n    fetch(url)\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            isLoaded: true,\n            items: json\n          })\n        });\n  }\n  inputChange\n\n  //Render Methode\n  render() {\n    const {name} = this.state\n    var { isLoaded, items } = this.state;\n    var arr3 = Object.values(items);\n\n    if (!isLoaded) {\n      return <div>Loading...</div>;\n    }\n    return (\n        <div classname=\"App\">\n          <h1 className='titel'>Phonetics-Converter</h1>\n          <form className='inputfield' onSubmit={this.handleSubmit}>\n            <label>\n              Word:\n              <input type=\"text\" name=\"name\" onChange={this.handleInputChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n\n          <ul>\n            {items.map(item => (\n                <li key=\"{item.id}\">\n                  Phonetic: {item.phonetic}\n                </li>\n            ))}\n          </ul>\n          <p>name is: {name}</p>\n        </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/**\n * @author: Joel Sahli\n * @version: 2.0\n */\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}